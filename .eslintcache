[{"/home/quinn/Desktop/projects/hhbc-project/src/index.js":"1","/home/quinn/Desktop/projects/hhbc-project/src/reportWebVitals.js":"2","/home/quinn/Desktop/projects/hhbc-project/src/App.js":"3","/home/quinn/Desktop/projects/hhbc-project/src/components/displayalbums.js":"4","/home/quinn/Desktop/projects/hhbc-project/src/components/signup.js":"5","/home/quinn/Desktop/projects/hhbc-project/src/components/signin.js":"6","/home/quinn/Desktop/projects/hhbc-project/src/components/homepage.js":"7","/home/quinn/Desktop/projects/hhbc-project/src/components/displaypoll.js":"8","/home/quinn/Desktop/projects/hhbc-project/src/components/choosenewalbums.js":"9","/home/quinn/Desktop/projects/hhbc-project/src/components/account.js":"10","/home/quinn/Desktop/projects/hhbc-project/src/components/passwordreset.js":"11","/home/quinn/Desktop/projects/hhbc-project/src/components/setnewpassword.js":"12"},{"size":500,"mtime":1607717142140,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1607717142140,"results":"15","hashOfConfig":"14"},{"size":4073,"mtime":1609362667233,"results":"16","hashOfConfig":"14"},{"size":315,"mtime":1607717142140,"results":"17","hashOfConfig":"14"},{"size":2964,"mtime":1609364497713,"results":"18","hashOfConfig":"14"},{"size":1971,"mtime":1609303381770,"results":"19","hashOfConfig":"14"},{"size":3182,"mtime":1609303383914,"results":"20","hashOfConfig":"14"},{"size":5869,"mtime":1609303383062,"results":"21","hashOfConfig":"14"},{"size":1139,"mtime":1608742532951,"results":"22","hashOfConfig":"14"},{"size":5082,"mtime":1609365678960,"results":"23","hashOfConfig":"14"},{"size":1552,"mtime":1609295038557,"results":"24","hashOfConfig":"14"},{"size":2416,"mtime":1609363777205,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1knr9jp",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/quinn/Desktop/projects/hhbc-project/src/index.js",[],["53","54"],"/home/quinn/Desktop/projects/hhbc-project/src/reportWebVitals.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/App.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/displayalbums.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/signup.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/signin.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/homepage.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/displaypoll.js",["55"],"import { useEffect, useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport ChooseNewAlbums from \"./choosenewalbums\";\n// import Swal from \"sweetalert2\";\nconst axios = require(\"axios\");\n\n//store votes with user ID instead of name - TODO\nconst DisplayPoll = () => {\n  const [albumState, setAlbumState] = useState([\n    { artist: \"\", title: \"\" },\n    { artist: \"\", title: \"\" },\n    { artist: \"\", title: \"\" },\n  ]);\n\n  const [name, setName] = useState(\"\");\n\n  const getAlbums = () => {\n    axios\n      .get(\"/api/votes/getalbums\")\n      .then(function (response) {\n        setAlbumState([\n          response.data.album1,\n          response.data.album2,\n          response.data.album3,\n        ]);\n      })\n      .catch(function (error) {\n        console.error(error);\n      });\n  };\n\n  useEffect(() => {\n    getAlbums();\n  }, []);\n\n  const [adminVis, setAdminVis] = useState(\"none\");\n  // const [logInVis, setLogInVis] = useState(\"none\");\n  let logInVis = \"none\";\n  const [userVote, setUserVote] = useState();\n  const [allVotes, setAllVotes] = useState([{ album: \"\" }]);\n\n  if (userVote === undefined) {\n    logInVis = \"none\";\n  } else {\n    logInVis = \"block\"\n  }\n\n  let votes0 = allVotes.filter((album) => album.album === albumState[0].title);\n  let voteNames0 = votes0.map((items) => items.user);\n\n  let votes1 = allVotes.filter((album) => album.album === albumState[1].title);\n  let voteNames1 = votes1.map((items) => items.user);\n\n  let votes2 = allVotes.filter((album) => album.album === albumState[2].title);\n  let voteNames2 = votes2.map((items) => items.user);\n\n  const getVotesFromDB = () => {\n    axios\n      .get(\"/api/votes/getvotes\")\n      .then(function (response) {\n        if (response.data.uservote) {\n          setUserVote(response.data.uservote.album);\n        }\n        if (response.data.allVotes) {\n          setAllVotes(response.data.allVotes);\n        }\n      })\n      .catch(function (error) {\n        console.error(error);\n      });\n  };\n\n  useEffect(() => {\n    getVotesFromDB();\n  }, [albumState]);\n\n  useEffect(() => {\n    //gets user from server\n    axios\n      .get(\"/api/users/getUser\")\n      .then(function (response) {\n        setName(response.data.firstname);\n        // setLogInVis(\"block\");\n        logInVis = \"block\";\n\n        if (response.data.firstname === \"Quinn\") {\n          setAdminVis(\"block\");\n        }\n      })\n      .catch(function (error) {\n        console.error(error);\n      });\n  }, []);\n\n  const [selectedAlbum, setSelectedAlbum] = useState([false, false, false]);\n  const sendVotes = (e) => {\n    e.preventDefault();\n    let voteInfo = {};\n\n    if (selectedAlbum[0] === true) {\n      voteInfo = { album: albumState[0].title, user: name };\n    } else if (selectedAlbum[1] === true) {\n      voteInfo = { album: albumState[1].title, user: name };\n    } else if (selectedAlbum[2] === true) {\n      voteInfo = { album: albumState[2].title, user: name };\n    }\n\n    axios\n      .post(\"/api/votes/vote\", voteInfo)\n      .then(function (response) {\n        getVotesFromDB();\n      })\n      .catch(function (error) {\n        Swal.fire({\n          title: \"Sign in to vote!\",\n          timer: 5000,\n          icon: \"error\",\n        });\n      });\n  };\n\n  return (\n    //use one form with 3 radio buttons and a submit for voting. Can control radio button state if they have already voted\n    <div>\n\n      <div className=\"pollRules\">\n        <p>To vote, simply select one of the options below and hit submit.</p>\n        <p>\n          If you need to change your vote you can select a different album and\n          hit submit.\n        </p>\n      </div>\n\n      <div className=\"pollIsLogged\" style={{ display: logInVis }}>\n        <h3>You voted for: {userVote}</h3>\n      </div>\n\n      <div className=\"poll\">\n        <form onSubmit={(e) => sendVotes(e)}>\n          <div className=\"pollSelections\">\n            <div className=\"voteHolder\">\n              <h3>{albumState[0].title}</h3>\n              <h4>{albumState[0].artist}</h4>\n              <input\n                type=\"radio\"\n                checked={selectedAlbum[0]}\n                onChange={() => setSelectedAlbum([true, false, false])}\n              ></input>\n              <p>{votes0.length}</p>\n              <p>\n                {voteNames0.map((name) => (\n                  <p>{name}</p>\n                ))}\n              </p>\n            </div>\n\n            <div className=\"voteHolder\">\n              <h3>{albumState[1].title}</h3>\n              <h4>{albumState[1].artist}</h4>\n              <input\n                type=\"radio\"\n                checked={selectedAlbum[1]}\n                onChange={() => setSelectedAlbum([false, true, false])}\n              ></input>\n              <p>{votes1.length}</p>\n              <p>\n                {voteNames1.map((name) => (\n                  <p>{name}</p>\n                ))}\n              </p>\n            </div>\n\n            <div className=\"voteHolder\">\n              {/* <h3>{albumState[2].artist + \" - \" + albumState[2].title}</h3> */}\n              <h3>{albumState[2].title}</h3>\n              <h4>{albumState[2].artist}</h4>\n              <input\n                type=\"radio\"\n                checked={selectedAlbum[2]}\n                onChange={() => setSelectedAlbum([false, false, true])}\n              ></input>\n              <p>{votes2.length}</p>\n              <p>\n                {voteNames2.map((name) => (\n                  <p>{name}</p>\n                ))}\n              </p>\n            </div>\n          </div>\n          <button className=\"voteButton\" type=\"submit\">\n          Submit\n        </button>\n        </form>\n        {/* <button className=\"voteButton\" onClick={() => sendVotes()}>\n          Submit\n        </button> */}\n      </div>\n      <div style={{ display: adminVis }}>\n        <button onClick={ChooseNewAlbums}>New Albums</button>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayPoll;\n","/home/quinn/Desktop/projects/hhbc-project/src/components/choosenewalbums.js",[],["56","57"],"/home/quinn/Desktop/projects/hhbc-project/src/components/account.js",["58"],"/home/quinn/Desktop/projects/hhbc-project/src/components/passwordreset.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/setnewpassword.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":84,"column":20,"nodeType":"65","endLine":84,"endColumn":27},{"ruleId":"59","replacedBy":"66"},{"ruleId":"61","replacedBy":"67"},{"ruleId":"63","severity":1,"message":"68","line":16,"column":6,"nodeType":"69","endLine":16,"endColumn":8,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","Assignments to the 'logInVis' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal",["71"],["72"],"React Hook useEffect has missing dependencies: 'history' and 'props.onLoggedIn'. Either include them or remove the dependency array. If 'setProfileInfo' needs the current value of 'props.onLoggedIn', you can also switch to useReducer instead of useState and read 'props.onLoggedIn' in the reducer.","ArrayExpression",["73"],"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [history, props.onLoggedIn]",{"range":"76","text":"77"},[434,436],"[history, props.onLoggedIn]"]