[{"/home/quinn/Desktop/projects/hhbc-project/src/index.js":"1","/home/quinn/Desktop/projects/hhbc-project/src/reportWebVitals.js":"2","/home/quinn/Desktop/projects/hhbc-project/src/App.js":"3","/home/quinn/Desktop/projects/hhbc-project/src/components/displayalbums.js":"4","/home/quinn/Desktop/projects/hhbc-project/src/components/signup.js":"5","/home/quinn/Desktop/projects/hhbc-project/src/components/signin.js":"6","/home/quinn/Desktop/projects/hhbc-project/src/components/homepage.js":"7","/home/quinn/Desktop/projects/hhbc-project/src/components/displaypoll.js":"8","/home/quinn/Desktop/projects/hhbc-project/src/components/choosenewalbums.js":"9","/home/quinn/Desktop/projects/hhbc-project/src/components/account.js":"10","/home/quinn/Desktop/projects/hhbc-project/src/components/passwordreset.js":"11","/home/quinn/Desktop/projects/hhbc-project/src/components/setnewpassword.js":"12","/home/quinn/Desktop/projects/hhbc-project/src/components/spotify.js":"13"},{"size":500,"mtime":1607717142140,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1607717142140,"results":"16","hashOfConfig":"15"},{"size":4627,"mtime":1610044581815,"results":"17","hashOfConfig":"15"},{"size":315,"mtime":1607717142140,"results":"18","hashOfConfig":"15"},{"size":2964,"mtime":1609364497713,"results":"19","hashOfConfig":"15"},{"size":1971,"mtime":1609303381770,"results":"20","hashOfConfig":"15"},{"size":4405,"mtime":1610044560583,"results":"21","hashOfConfig":"15"},{"size":10013,"mtime":1609983519211,"results":"22","hashOfConfig":"15"},{"size":2234,"mtime":1609984049939,"results":"23","hashOfConfig":"15"},{"size":4910,"mtime":1609371002773,"results":"24","hashOfConfig":"15"},{"size":1552,"mtime":1609295038557,"results":"25","hashOfConfig":"15"},{"size":2416,"mtime":1609363777205,"results":"26","hashOfConfig":"15"},{"size":1256,"mtime":1609972568538,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1knr9jp",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/quinn/Desktop/projects/hhbc-project/src/index.js",[],["57","58"],"/home/quinn/Desktop/projects/hhbc-project/src/reportWebVitals.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/App.js",["59"],"/home/quinn/Desktop/projects/hhbc-project/src/components/displayalbums.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/signup.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/signin.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/homepage.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/displaypoll.js",["60","61"],"import { useEffect, useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport ChooseNewAlbums from \"./choosenewalbums\";\n\nimport noAlbumArt from \"./defaultnoalbum.jpg\";\n// import Swal from \"sweetalert2\";\nconst axios = require(\"axios\");\n\n//store votes with user ID instead of name - TODO\nconst DisplayPoll = () => {\n  const [albumState, setAlbumState] = useState([\n    { artist: \"\", title: \"\" },\n    { artist: \"\", title: \"\" },\n    { artist: \"\", title: \"\" },\n  ]);\n  const [albumCover1, setAlbumCover1] = useState(noAlbumArt);\n  const [albumCover2, setAlbumCover2] = useState(noAlbumArt);\n  const [albumCover3, setAlbumCover3] = useState(noAlbumArt);\n\n  const [name, setName] = useState(\"\");\n\n\n  const getAlbumCovers = () => {\n    console.log(\"here\");\n\n    axios\n      .get(\"/api/spotify/getalbumart\")\n      .then(function (response) {\n        console.log(response.data);\n\n        for (let i = 0; i < response.data.length; i++) {\n          if (\n            response.data[i].album === albumState[0].title &&\n            response.data[i].artist === albumState[0].artist\n          ) {\n            setAlbumCover1(response.data[i].albumUrl);\n          } else if (\n            response.data[i].album === albumState[1].title &&\n            response.data[i].artist === albumState[1].artist\n          ) {\n            setAlbumCover2(response.data[i].albumUrl);\n          } else if (\n            response.data[i].album === albumState[2].title &&\n            response.data[i].artist === albumState[2].artist\n          ) {\n            setAlbumCover3(response.data[i].albumUrl);\n          }\n        }\n\n        searchAlbumCovers();\n      })\n      .catch(function (error) {\n        console.error(error);\n      });\n  };\n  useEffect(() => {\n    getAlbumCovers();\n  }, [albumState]);\n\n  const searchAlbumCovers = () => {\n    console.log('here')\n    const album1 = { album: albumState[0].title, artist: albumState[0].artist };\n    const album2 = { album: albumState[1].title, artist: albumState[1].artist };\n    const album3 = { album: albumState[2].title, artist: albumState[2].artist };\n\n    if (\n      albumCover1 !== noAlbumArt &&\n      albumCover2 !== noAlbumArt &&\n      albumCover3 !== noAlbumArt\n    ) {\n      axios\n        .post(\"/api/spotify/albumsearch\", album1)\n        .then(function (response) {\n          console.log(response);\n        })\n        .catch(function (error) {\n          console.error(error);\n        });\n\n        axios\n        .post(\"/api/spotify/albumsearch\", album2)\n        .then(function (response) {\n          console.log(response);\n        })\n        .catch(function (error) {\n          console.error(error);\n        });\n\n        axios\n        .post(\"/api/spotify/albumsearch\", album3)\n        .then(function (response) {\n          console.log(response);\n        })\n        .catch(function (error) {\n          console.error(error);\n        });\n    }\n  };\n\n  const getAlbums = () => {\n    axios\n      .get(\"/api/votes/getalbums\")\n      .then(function (response) {\n        setAlbumState([\n          response.data.album1,\n          response.data.album2,\n          response.data.album3,\n        ]);\n      })\n      .catch(function (error) {\n        // console.error(error);\n      });\n  };\n\n  useEffect(() => {\n    getAlbums();\n  }, []);\n\n  const [adminVis, setAdminVis] = useState(\"none\");\n  // const [logInVis, setLogInVis] = useState(\"none\");\n  let logInVis = \"none\";\n  const [userVote, setUserVote] = useState();\n  const [allVotes, setAllVotes] = useState([{ album: \"\" }]);\n\n  if (userVote === undefined) {\n    logInVis = \"none\";\n  } else {\n    logInVis = \"block\";\n  }\n\n  let votes0 = allVotes.filter((album) => album.album === albumState[0].title);\n  let voteNames0 = votes0.map((items) => items.user);\n\n  let votes1 = allVotes.filter((album) => album.album === albumState[1].title);\n  let voteNames1 = votes1.map((items) => items.user);\n\n  let votes2 = allVotes.filter((album) => album.album === albumState[2].title);\n  let voteNames2 = votes2.map((items) => items.user);\n\n  const getVotesFromDB = () => {\n    axios\n      .get(\"/api/votes/getvotes\")\n      .then(function (response) {\n        if (response.data.uservote) {\n          setUserVote(response.data.uservote.album);\n        }\n        if (response.data.allVotes) {\n          setAllVotes(response.data.allVotes);\n        }\n      })\n      .catch(function (error) {\n        // // console.error(error);\n      });\n  };\n\n  useEffect(() => {\n    getVotesFromDB();\n  }, [albumState]);\n\n  useEffect(() => {\n    //gets user from server\n    axios\n      .get(\"/api/users/getUser\")\n      .then(function (response) {\n        setName(response.data.firstname);\n        // setLogInVis(\"block\");\n        // logInVis = \"block\";\n\n        if (response.data.firstname === \"Quinn\") {\n          setAdminVis(\"block\");\n        }\n      })\n      .catch(function (error) {\n        // console.error(error);\n      });\n  }, []);\n\n  const [selectedAlbum, setSelectedAlbum] = useState([false, false, false]);\n  const sendVotes = (e) => {\n    e.preventDefault();\n    let voteInfo = {};\n\n    if (selectedAlbum[0] === true) {\n      voteInfo = { album: albumState[0].title, user: name };\n    } else if (selectedAlbum[1] === true) {\n      voteInfo = { album: albumState[1].title, user: name };\n    } else if (selectedAlbum[2] === true) {\n      voteInfo = { album: albumState[2].title, user: name };\n    }\n\n    axios\n      .post(\"/api/votes/vote\", voteInfo)\n      .then(function (response) {\n        getVotesFromDB();\n      })\n      .catch(function (error) {\n        Swal.fire({\n          title: \"Sign in to vote!\",\n          timer: 5000,\n          icon: \"error\",\n        });\n      });\n  };\n\n  const unselectedStyle = { border: \"2px solid gold\" },\n    selectedStyle = { border: \"2px solid  rgb(15, 59, 192)\" };\n\n  const [album1Style, setAlbum1Style] = useState(unselectedStyle);\n  const [album2Style, setAlbum2Style] = useState(unselectedStyle);\n  const [album3Style, setAlbum3Style] = useState(unselectedStyle);\n\n  const handleUserChoice = (index) => {\n    if (index === 0) {\n      //album1\n      setSelectedAlbum([true, false, false]);\n      setAlbum1Style(selectedStyle);\n      setAlbum2Style(unselectedStyle);\n      setAlbum3Style(unselectedStyle);\n    }\n    if (index === 1) {\n      //album1\n      setSelectedAlbum([false, true, false]);\n      setAlbum1Style(unselectedStyle);\n      setAlbum2Style(selectedStyle);\n      setAlbum3Style(unselectedStyle);\n    }\n    if (index === 2) {\n      //album1\n      setSelectedAlbum([false, false, true]);\n      setAlbum1Style(unselectedStyle);\n      setAlbum2Style(unselectedStyle);\n      setAlbum3Style(selectedStyle);\n    }\n  };\n\n  return (\n    //use one form with 3 radio buttons and a submit for voting. Can control radio button state if they have already voted\n    <div>\n      <div className=\"pollRules\">\n        <p>To vote, simply select one of the options below and hit submit.</p>\n        <p>\n          If you need to change your vote you can select a different album and\n          hit submit.\n        </p>\n      </div>\n\n      {/* <div className=\"pollIsLogged\" style={{ display: logInVis }}>\n        <h3>You voted for: {userVote}</h3>\n      </div> */}\n\n      <div className=\"poll\">\n        <form onSubmit={(e) => sendVotes(e)}>\n          <div className=\"pollSelections\">\n            <div className=\"voteHolder\">\n              <img\n                src={albumCover1}\n                alt={`album art for ${albumState[0].title}`}\n                className=\"albumArt\"\n                style={album1Style}\n                onClick={() => handleUserChoice(0)}\n              ></img>\n              <h3>{albumState[0].title}</h3>\n              <h4>{albumState[0].artist}</h4>\n              {/* <input\n                type=\"radio\"\n                checked={selectedAlbum[0]}\n                onChange={() => setSelectedAlbum([true, false, false])}\n              ></input> */}\n              <p>{votes0.length}</p>\n              <p>\n                {voteNames0.map((name) => (\n                  <p>{name}</p>\n                ))}\n              </p>\n            </div>\n\n            <div className=\"voteHolder\">\n              <img\n                src={albumCover2}\n                alt={`album art for ${albumState[1].title}`}\n                className=\"albumArt\"\n                style={album2Style}\n                onClick={() => handleUserChoice(1)}\n              ></img>\n              <h3>{albumState[1].title}</h3>\n              <h4>{albumState[1].artist}</h4>\n              {/* <input\n                type=\"radio\"\n                checked={selectedAlbum[1]}\n                onChange={() => setSelectedAlbum([false, true, false])}\n              ></input> */}\n              <p>{votes1.length}</p>\n              <p>\n                {voteNames1.map((name) => (\n                  <p>{name}</p>\n                ))}\n              </p>\n            </div>\n\n            <div className=\"voteHolder\">\n              <img\n                src={albumCover3}\n                alt={`album art for ${albumState[2].title}`}\n                className=\"albumArt\"\n                style={album3Style}\n                onClick={() => handleUserChoice(2)}\n              ></img>\n              <h3>{albumState[2].title}</h3>\n              <h4>{albumState[2].artist}</h4>\n              {/* <input\n                type=\"radio\"\n                checked={selectedAlbum[2]}\n                onChange={() => setSelectedAlbum([false, false, true])}\n              ></input> */}\n              <p>{votes2.length}</p>\n              <p>\n                {voteNames2.map((name) => (\n                  <p>{name}</p>\n                ))}\n              </p>\n            </div>\n          </div>\n          <button className=\"voteButton\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n        {/* <button className=\"voteButton\" onClick={() => sendVotes()}>\n          Submit\n        </button> */}\n      </div>\n      <div style={{ display: adminVis }}>\n        <button onClick={ChooseNewAlbums}>New Albums</button>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayPoll;\n","/home/quinn/Desktop/projects/hhbc-project/src/components/choosenewalbums.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/account.js",["62"],"import { useEffect, useState } from \"react\";\nconst axios = require(\"axios\");\n\nconst Account = (props) => {\n  const [profileInfo, setProfileInfo] = useState({});\n  const [isEdit, setIsEdit] = useState(false);\n\n  useEffect(() => {\n    if (props.onLoggedIn.firstname) {\n      setProfileInfo(props.onLoggedIn);\n    }\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(\"/api/users/getUser\")\n      .then(function (response) {\n        setProfileInfo(response.data);\n      })\n      .catch(function (error) {\n        console.error(error);\n      });\n  }, []);\n\n  const logOut = () => {\n    axios\n      .get(\"/api/users/logout\")\n      .then(function () {})\n      .catch(function (error) {\n        console.error(error);\n      });\n  };\n\n  const editAccount = () => {\n    setIsEdit(!isEdit);\n  };\n\n  const [editedAccount, setEditedAccount] = useState({\n    _id: props.onLoggedIn._id,\n    firstname: props.onLoggedIn.firstname,\n    lastname: props.onLoggedIn.lastname,\n    email: props.onLoggedIn.email,\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    axios\n      .post(\"/api/users/editUser\", editedAccount)\n      .then(function (response) {\n        console.log(response);\n        setProfileInfo(editedAccount);\n        setIsEdit(!isEdit);\n        setEditedAccount({\n          _id: props.onLoggedIn._id,\n          firstname: props.onLoggedIn.firstname,\n          lastname: props.onLoggedIn.lastname,\n          email: props.onLoggedIn.email,\n        });\n      })\n      .catch(function (error) {\n        console.error(error);\n      });\n  };\n\n  // edit not working while on heroku for some reason. fix later\n  return (\n    <div>\n      <div>\n        {/* <form onSubmit={() => logOut()}>\n          <button type=\"submit\" className=\"logoutBtn\">Log Out</button>\n        </form> */}\n\n        {isEdit === true ? (\n          <div>\n            <div className=\"profile\">\n              <span className=\"profileinfo\">Name: {profileInfo.firstname}</span>\n              <span className=\"profileinfo\">Last: {profileInfo.lastname}</span>\n              <span className=\"profileinfo\">Email: {profileInfo.email}</span>\n              <div className=\"accountBtns\">\n                <form onSubmit={() => logOut()}>\n                  <button type=\"submit\">Log Out</button>\n                </form>\n                <button onClick={() => editAccount()}>Edit</button>\n              </div>\n            </div>\n            <div>\n              <form onSubmit={(e) => handleSubmit(e)} className=\"profileEdit\">\n                <input\n                  className=\"editInput\"\n                  placeholder=\"Name\"\n                  defaultValue={profileInfo.firstname}\n                  type=\"text\"\n                  onChange={(event) => {\n                    setEditedAccount({\n                      _id: props.onLoggedIn._id,\n                      firstname: event.target.value,\n                      lastname: editedAccount.lastname,\n                      email: editedAccount.email,\n                    });\n                  }}\n                ></input>\n                <input\n                  className=\"editInput\"\n                  placeholder=\"Last\"\n                  defaultValue={profileInfo.lastname}\n                  type=\"text\"\n                  onChange={(event) => {\n                    setEditedAccount({\n                      _id: props.onLoggedIn._id,\n                      firstname: editedAccount.firstname,\n                      lastname: event.target.value,\n                      email: editedAccount.email,\n                    });\n                  }}\n                ></input>\n                <input\n                  className=\"editInput\"\n                  placeholder=\"Email\"\n                  defaultValue={profileInfo.email}\n                  type=\"email\"\n                  onChange={(event) => {\n                    setEditedAccount({\n                      _id: props.onLoggedIn._id,\n                      firstname: editedAccount.firstname,\n                      lastname: editedAccount.lastname,\n                      email: event.target.value,\n                    });\n                  }}\n                ></input>\n                <button type=\"submit\" className=\"editInputButton\">\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        ) : (\n          <div className=\"profile\">\n            <span className=\"profileinfo\">Name: {profileInfo.firstname}</span>\n            <span className=\"profileinfo\">Last: {profileInfo.lastname}</span>\n            <span className=\"profileinfo\">Email: {profileInfo.email}</span>\n            <div className=\"accountBtns\">\n              <form onSubmit={() => logOut()}>\n                <button type=\"submit\">Log Out</button>\n              </form>\n              <button onClick={() => editAccount()}>Edit</button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Account;\n","/home/quinn/Desktop/projects/hhbc-project/src/components/passwordreset.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/setnewpassword.js",[],"/home/quinn/Desktop/projects/hhbc-project/src/components/spotify.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":16,"column":8,"nodeType":"69","messageId":"70","endLine":16,"endColumn":15},{"ruleId":"71","severity":1,"message":"72","line":58,"column":6,"nodeType":"73","endLine":58,"endColumn":18,"suggestions":"74"},{"ruleId":"67","severity":1,"message":"75","line":128,"column":5,"nodeType":"69","messageId":"70","endLine":128,"endColumn":13},{"ruleId":"71","severity":1,"message":"76","line":12,"column":6,"nodeType":"73","endLine":12,"endColumn":8,"suggestions":"77"},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'Spotify' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAlbumCovers'. Either include it or remove the dependency array.","ArrayExpression",["80"],"'logInVis' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.onLoggedIn'. Either include it or remove the dependency array. If 'setProfileInfo' needs the current value of 'props.onLoggedIn', you can also switch to useReducer instead of useState and read 'props.onLoggedIn' in the reducer.",["81"],"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [albumState, getAlbumCovers]",{"range":"86","text":"87"},"Update the dependencies array to be: [props.onLoggedIn]",{"range":"88","text":"89"},[1753,1765],"[albumState, getAlbumCovers]",[318,320],"[props.onLoggedIn]"]